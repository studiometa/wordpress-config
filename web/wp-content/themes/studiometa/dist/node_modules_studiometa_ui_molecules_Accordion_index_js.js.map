{"version":3,"file":"node_modules_studiometa_ui_molecules_Accordion_index_js.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvhKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@studiometa/wordpress-project/./node_modules/@studiometa/ui/molecules/Accordion/Accordion.js","webpack://@studiometa/wordpress-project/./node_modules/@studiometa/ui/molecules/Accordion/AccordionCore.js","webpack://@studiometa/wordpress-project/./node_modules/@studiometa/ui/molecules/Accordion/AccordionItem.js","webpack://@studiometa/wordpress-project/./node_modules/@studiometa/ui/molecules/Accordion/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { AccordionCore } from \"./AccordionCore.js\";\nimport { AccordionItem } from \"./AccordionItem.js\";\nclass Accordion extends AccordionCore {\n}\n__publicField(Accordion, \"config\", {\n  ...AccordionCore.config,\n  components: {\n    AccordionItem\n  }\n});\nexport {\n  Accordion\n};\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { Base } from \"@studiometa/js-toolkit\";\nclass AccordionCore extends Base {\n  onAccordionItemOpen(index) {\n    this.$emit(\"open\", this.$children.AccordionItem[index], index);\n    if (this.$options.autoclose) {\n      this.$children.AccordionItem.filter((el, i) => index !== i).forEach((item) => item.close());\n    }\n  }\n  onAccordionItemClose(index) {\n    this.$emit(\"close\", this.$children.AccordionItem[index], index);\n  }\n}\n__publicField(AccordionCore, \"config\", {\n  name: \"Accordion\",\n  emits: [\"open\", \"close\"],\n  options: {\n    autoclose: Boolean,\n    item: {\n      type: Object,\n      default: () => ({})\n    }\n  }\n});\nexport {\n  AccordionCore\n};\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport deepmerge from \"deepmerge\";\nimport { Base } from \"@studiometa/js-toolkit\";\nimport { transition } from \"@studiometa/js-toolkit/utils\";\nimport { AccordionCore as Accordion } from \"./AccordionCore.js\";\nconst _AccordionItem = class extends Base {\n  mounted() {\n    if (this.$parent && this.$parent instanceof Accordion && this.$parent.$options.item) {\n      Object.entries(this.$parent.$options.item).forEach(([key, value]) => {\n        var _a;\n        if (key in this.$options) {\n          const type = (_a = _AccordionItem.config.options[key].type) != null ? _a : _AccordionItem.config.options[key];\n          if (type === Array || type === Object) {\n            this.$options[key] = deepmerge(this.$options[key], value);\n          } else {\n            this.$options[key] = value;\n          }\n        }\n      });\n    }\n    this.$refs.btn.setAttribute(\"id\", this.$id);\n    this.$refs.btn.setAttribute(\"aria-controls\", this.contentId);\n    this.$refs.content.setAttribute(\"aria-labelledby\", this.$id);\n    this.$refs.content.setAttribute(\"id\", this.contentId);\n    const { isOpen } = this.$options;\n    this.updateAttributes(isOpen);\n    const { container, ...otherStyles } = this.$options.styles;\n    const { $refs } = this;\n    Object.entries(otherStyles).filter(([refName]) => $refs[refName]).forEach(([refName, { open, closed } = { open: \"\", closed: \"\" }]) => {\n      transition($refs[refName], { to: isOpen ? open : closed }, \"keep\");\n    });\n  }\n  destroyed() {\n    this.$refs.container.style.visibility = \"\";\n    this.$refs.container.style.height = \"\";\n  }\n  onBtnClick() {\n    if (this.$options.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n  get contentId() {\n    return `content-${this.$id}`;\n  }\n  updateAttributes(isOpen) {\n    this.$refs.container.style.visibility = isOpen ? \"\" : \"invisible\";\n    this.$refs.container.style.height = isOpen ? \"\" : \"0\";\n    this.$refs.content.setAttribute(\"aria-hidden\", isOpen ? \"false\" : \"true\");\n    this.$refs.btn.setAttribute(\"aria-expanded\", isOpen ? \"true\" : \"false\");\n  }\n  async open() {\n    if (this.$options.isOpen) {\n      return;\n    }\n    this.$log(\"open\");\n    this.$emit(\"open\");\n    this.$options.isOpen = true;\n    this.updateAttributes(this.$options.isOpen);\n    this.$refs.container.style.visibility = \"\";\n    const { container, ...otherStyles } = this.$options.styles;\n    const { $refs } = this;\n    await Promise.all([\n      transition($refs.container, {\n        from: { height: \"0\" },\n        active: container.active,\n        to: { height: `${$refs.content.offsetHeight}px` }\n      }).then(() => {\n        if (this.$options.isOpen) {\n          $refs.content.style.position = \"\";\n        }\n        return Promise.resolve();\n      }),\n      ...Object.entries(otherStyles).filter(([refName]) => $refs[refName]).map(\n        ([refName, { open, active, closed } = { open: \"\", active: \"\", closed: \"\" }]) => transition(\n          $refs[refName],\n          {\n            from: closed,\n            active,\n            to: open\n          },\n          \"keep\"\n        )\n      )\n    ]);\n  }\n  async close() {\n    if (!this.$options.isOpen) {\n      return;\n    }\n    this.$log(\"close\");\n    this.$emit(\"close\");\n    this.$options.isOpen = false;\n    const height = this.$refs.container.offsetHeight;\n    this.$refs.content.style.position = \"absolute\";\n    const { container, ...otherStyles } = this.$options.styles;\n    const refs = this.$refs;\n    await Promise.all([\n      transition(refs.container, {\n        from: { height: `${height}px` },\n        active: container.active,\n        to: { height: \"0\" }\n      }).then(() => {\n        if (!this.$options.isOpen) {\n          refs.container.style.height = \"0\";\n          refs.container.style.visibility = \"invisible\";\n          this.updateAttributes(this.$options.isOpen);\n        }\n        return Promise.resolve();\n      }),\n      ...Object.entries(otherStyles).filter(([refName]) => refs[refName]).map(\n        ([refName, { open, active, closed } = { open: \"\", active: \"\", closed: \"\" }]) => transition(\n          refs[refName],\n          {\n            from: open,\n            active,\n            to: closed\n          },\n          \"keep\"\n        )\n      )\n    ]);\n  }\n};\nlet AccordionItem = _AccordionItem;\n__publicField(AccordionItem, \"config\", {\n  name: \"AccordionItem\",\n  refs: [\"btn\", \"content\", \"container\"],\n  emits: [\"open\", \"close\"],\n  options: {\n    isOpen: Boolean,\n    styles: {\n      type: Object,\n      default: () => ({\n        container: {\n          open: \"\",\n          active: \"\",\n          closed: \"\"\n        }\n      }),\n      merge: true\n    }\n  }\n});\nexport {\n  AccordionItem\n};\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n","export * from \"./Accordion.js\";\nexport * from \"./AccordionItem.js\";\n\n\nif (module.hot) {module.hot.accept(function(err) {\nif (err) {\nconsole.error(err);\n}\n});\n}\n"],"names":[],"sourceRoot":""}